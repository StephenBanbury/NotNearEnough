using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class MediaScreenDisplayStateModel
{
    [RealtimeProperty(1, true)] private int _mediaTypeId;
    [RealtimeProperty(2, true)] private int _mediaId;
    [RealtimeProperty(3, true)] private int _screenDisplayId;
    [RealtimeProperty(4, true)] private bool _isPortal;
    [RealtimeProperty(5, true)] private bool _isDisplay;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class MediaScreenDisplayStateModel : RealtimeModel {
    public int mediaTypeId {
        get {
            return _mediaTypeIdProperty.value;
        }
        set {
            if (_mediaTypeIdProperty.value == value) return;
            _mediaTypeIdProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public int mediaId {
        get {
            return _mediaIdProperty.value;
        }
        set {
            if (_mediaIdProperty.value == value) return;
            _mediaIdProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public int screenDisplayId {
        get {
            return _screenDisplayIdProperty.value;
        }
        set {
            if (_screenDisplayIdProperty.value == value) return;
            _screenDisplayIdProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public bool isPortal {
        get {
            return _isPortalProperty.value;
        }
        set {
            if (_isPortalProperty.value == value) return;
            _isPortalProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public bool isDisplay {
        get {
            return _isDisplayProperty.value;
        }
        set {
            if (_isDisplayProperty.value == value) return;
            _isDisplayProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public enum PropertyID : uint {
        MediaTypeId = 1,
        MediaId = 2,
        ScreenDisplayId = 3,
        IsPortal = 4,
        IsDisplay = 5,
    }
    
    #region Properties
    
    private ReliableProperty<int> _mediaTypeIdProperty;
    
    private ReliableProperty<int> _mediaIdProperty;
    
    private ReliableProperty<int> _screenDisplayIdProperty;
    
    private ReliableProperty<bool> _isPortalProperty;
    
    private ReliableProperty<bool> _isDisplayProperty;
    
    #endregion
    
    public MediaScreenDisplayStateModel() : base(null) {
        _mediaTypeIdProperty = new ReliableProperty<int>(1, _mediaTypeId);
        _mediaIdProperty = new ReliableProperty<int>(2, _mediaId);
        _screenDisplayIdProperty = new ReliableProperty<int>(3, _screenDisplayId);
        _isPortalProperty = new ReliableProperty<bool>(4, _isPortal);
        _isDisplayProperty = new ReliableProperty<bool>(5, _isDisplay);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _mediaTypeIdProperty.UnsubscribeCallback();
        _mediaIdProperty.UnsubscribeCallback();
        _screenDisplayIdProperty.UnsubscribeCallback();
        _isPortalProperty.UnsubscribeCallback();
        _isDisplayProperty.UnsubscribeCallback();
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _mediaTypeIdProperty.WriteLength(context);
        length += _mediaIdProperty.WriteLength(context);
        length += _screenDisplayIdProperty.WriteLength(context);
        length += _isPortalProperty.WriteLength(context);
        length += _isDisplayProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _mediaTypeIdProperty.Write(stream, context);
        writes |= _mediaIdProperty.Write(stream, context);
        writes |= _screenDisplayIdProperty.Write(stream, context);
        writes |= _isPortalProperty.Write(stream, context);
        writes |= _isDisplayProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.MediaTypeId: {
                    changed = _mediaTypeIdProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.MediaId: {
                    changed = _mediaIdProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.ScreenDisplayId: {
                    changed = _screenDisplayIdProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.IsPortal: {
                    changed = _isPortalProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.IsDisplay: {
                    changed = _isDisplayProperty.Read(stream, context);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _mediaTypeId = mediaTypeId;
        _mediaId = mediaId;
        _screenDisplayId = screenDisplayId;
        _isPortal = isPortal;
        _isDisplay = isDisplay;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
