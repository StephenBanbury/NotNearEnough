using Normal.Realtime;
using Normal.Realtime.Serialization;

namespace Assets.Scripts
{
    [RealtimeModel()]
    public partial class ScreenPortalStateModel
    {
        [RealtimeProperty(1, true, true)] private int _screenId;
        [RealtimeProperty(2, true, true)] private bool _isPortal;
        [RealtimeProperty(3, true, true)] private int _destinationSceneId;
    }
}

/* ----- Begin Normal Autogenerated Code ----- */
namespace Assets.Scripts {
    public partial class ScreenPortalStateModel : RealtimeModel {
        public int screenId {
            get {
                return _screenIdProperty.value;
            }
            set {
                if (_screenIdProperty.value == value) return;
                _screenIdProperty.value = value;
                InvalidateReliableLength();
                FireScreenIdDidChange(value);
            }
        }
        
        public bool isPortal {
            get {
                return _isPortalProperty.value;
            }
            set {
                if (_isPortalProperty.value == value) return;
                _isPortalProperty.value = value;
                InvalidateReliableLength();
                FireIsPortalDidChange(value);
            }
        }
        
        public int destinationSceneId {
            get {
                return _destinationSceneIdProperty.value;
            }
            set {
                if (_destinationSceneIdProperty.value == value) return;
                _destinationSceneIdProperty.value = value;
                InvalidateReliableLength();
                FireDestinationSceneIdDidChange(value);
            }
        }
        
        public delegate void PropertyChangedHandler<in T>(ScreenPortalStateModel model, T value);
        public event PropertyChangedHandler<int> screenIdDidChange;
        public event PropertyChangedHandler<bool> isPortalDidChange;
        public event PropertyChangedHandler<int> destinationSceneIdDidChange;
        
        public enum PropertyID : uint {
            ScreenId = 1,
            IsPortal = 2,
            DestinationSceneId = 3,
        }
        
        #region Properties
        
        private ReliableProperty<int> _screenIdProperty;
        
        private ReliableProperty<bool> _isPortalProperty;
        
        private ReliableProperty<int> _destinationSceneIdProperty;
        
        #endregion
        
        public ScreenPortalStateModel() : base(null) {
            _screenIdProperty = new ReliableProperty<int>(1, _screenId);
            _isPortalProperty = new ReliableProperty<bool>(2, _isPortal);
            _destinationSceneIdProperty = new ReliableProperty<int>(3, _destinationSceneId);
        }
        
        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
            _screenIdProperty.UnsubscribeCallback();
            _isPortalProperty.UnsubscribeCallback();
            _destinationSceneIdProperty.UnsubscribeCallback();
        }
        
        private void FireScreenIdDidChange(int value) {
            try {
                screenIdDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireIsPortalDidChange(bool value) {
            try {
                isPortalDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireDestinationSceneIdDidChange(int value) {
            try {
                destinationSceneIdDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        protected override int WriteLength(StreamContext context) {
            var length = 0;
            length += _screenIdProperty.WriteLength(context);
            length += _isPortalProperty.WriteLength(context);
            length += _destinationSceneIdProperty.WriteLength(context);
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            var writes = false;
            writes |= _screenIdProperty.Write(stream, context);
            writes |= _isPortalProperty.Write(stream, context);
            writes |= _destinationSceneIdProperty.Write(stream, context);
            if (writes) InvalidateContextLength(context);
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            var anyPropertiesChanged = false;
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                var changed = false;
                switch (propertyID) {
                    case (uint) PropertyID.ScreenId: {
                        changed = _screenIdProperty.Read(stream, context);
                        if (changed) FireScreenIdDidChange(screenId);
                        break;
                    }
                    case (uint) PropertyID.IsPortal: {
                        changed = _isPortalProperty.Read(stream, context);
                        if (changed) FireIsPortalDidChange(isPortal);
                        break;
                    }
                    case (uint) PropertyID.DestinationSceneId: {
                        changed = _destinationSceneIdProperty.Read(stream, context);
                        if (changed) FireDestinationSceneIdDidChange(destinationSceneId);
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
                anyPropertiesChanged |= changed;
            }
            if (anyPropertiesChanged) {
                UpdateBackingFields();
            }
        }
        
        private void UpdateBackingFields() {
            _screenId = screenId;
            _isPortal = isPortal;
            _destinationSceneId = destinationSceneId;
        }
        
    }
}
/* ----- End Normal Autogenerated Code ----- */
