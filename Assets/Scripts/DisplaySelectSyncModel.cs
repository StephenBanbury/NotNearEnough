using UnityEngine;
using Normal.Realtime.Serialization;
using Normal.Realtime;

namespace Assets.Scripts
{
    [RealtimeModel]
    public partial class DisplaySelectSyncModel
    {
        // 5, 13
        [RealtimeProperty(1, true, true)] private int _displayId;
    }
}

/* ----- Begin Normal Autogenerated Code ----- */
namespace Assets.Scripts {
    public partial class DisplaySelectSyncModel : RealtimeModel {
        public int displayId {
            get {
                return _cache.LookForValueInCache(_displayId, entry => entry.displayIdSet, entry => entry.displayId);
            }
            set {
                if (this.displayId == value) return;
                _cache.UpdateLocalCache(entry => { entry.displayIdSet = true; entry.displayId = value; return entry; });
                InvalidateReliableLength();
                FireDisplayIdDidChange(value);
            }
        }
        
        public delegate void PropertyChangedHandler<in T>(DisplaySelectSyncModel model, T value);
        public event PropertyChangedHandler<int> displayIdDidChange;
        
        private struct LocalCacheEntry {
            public bool displayIdSet;
            public int displayId;
        }
        
        private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
        
        public enum PropertyID : uint {
            DisplayId = 13,
        }
        
        public DisplaySelectSyncModel() : this(null) {
        }
        
        public DisplaySelectSyncModel(RealtimeModel parent) : base(null, parent) {
        }
        
        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
            UnsubscribeClearCacheCallback();
        }
        
        private void FireDisplayIdDidChange(int value) {
            try {
                displayIdDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        protected override int WriteLength(StreamContext context) {
            int length = 0;
            if (context.fullModel) {
                FlattenCache();
                length += WriteStream.WriteVarint32Length((uint)PropertyID.DisplayId, (uint)_displayId);
            } else if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.displayIdSet) {
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.DisplayId, (uint)entry.displayId);
                }
            }
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            var didWriteProperties = false;
            
            if (context.fullModel) {
                stream.WriteVarint32((uint)PropertyID.DisplayId, (uint)_displayId);
            } else if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.displayIdSet) {
                    _cache.PushLocalCacheToInflight(context.updateID);
                    ClearCacheOnStreamCallback(context);
                }
                if (entry.displayIdSet) {
                    stream.WriteVarint32((uint)PropertyID.DisplayId, (uint)entry.displayId);
                    didWriteProperties = true;
                }
                
                if (didWriteProperties) InvalidateReliableLength();
            }
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                switch (propertyID) {
                    case (uint)PropertyID.DisplayId: {
                        int previousValue = _displayId;
                        _displayId = (int)stream.ReadVarint32();
                        bool displayIdExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.displayIdSet);
                        if (!displayIdExistsInChangeCache && _displayId != previousValue) {
                            FireDisplayIdDidChange(_displayId);
                        }
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
            }
        }
        
        #region Cache Operations
        
        private StreamEventDispatcher _streamEventDispatcher;
        
        private void FlattenCache() {
            _displayId = displayId;
            _cache.Clear();
        }
        
        private void ClearCache(uint updateID) {
            _cache.RemoveUpdateFromInflight(updateID);
        }
        
        private void ClearCacheOnStreamCallback(StreamContext context) {
            if (_streamEventDispatcher != context.dispatcher) {
                UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
            }
            _streamEventDispatcher = context.dispatcher;
            _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
        }
        
        private void UnsubscribeClearCacheCallback() {
            if (_streamEventDispatcher != null) {
                _streamEventDispatcher.RemoveStreamCallback(ClearCache);
                _streamEventDispatcher = null;
            }
        }
        
        #endregion
    }
}
/* ----- End Normal Autogenerated Code ----- */
