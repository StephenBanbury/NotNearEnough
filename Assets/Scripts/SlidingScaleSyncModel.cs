using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

namespace Assets.Scripts
{
    [RealtimeModel]
    public partial class SlidingScaleSyncModel
    {   
        // 1
        [RealtimeProperty(11, true, true)] private float _scaleValue;
    }

/* ----- Begin Normal Autogenerated Code ----- */
    public partial class SlidingScaleSyncModel : IModel
    {
        // Properties
        public float scaleValue
        {
            get { return _cache.LookForValueInCache(_scaleValue, entry => entry.valueSet, entry => entry.scaleValue); }
            set
            {
                if (value == scaleValue) return;
                _cache.UpdateLocalCache(entry =>
                {
                    entry.valueSet = true;
                    entry.scaleValue = value;
                    return entry;
                });
                FireValueDidChange(value);
            }
        }

        // Events
        public delegate void ValueDidChange(SlidingScaleSyncModel model, float value);

        public event ValueDidChange valueDidChange;

        // Delta updates
        private struct LocalCacheEntry
        {
            public bool valueSet;
            public float scaleValue;
        }

        private LocalChangeCache<LocalCacheEntry> _cache;

        public SlidingScaleSyncModel()
        {
            _cache = new LocalChangeCache<LocalCacheEntry>();
        }

        // Events
        public void FireValueDidChange(float value)
        {
            try
            {
                if (valueDidChange != null)
                    valueDidChange(this, value);
            }
            catch (System.Exception exception)
            {
                Debug.LogException(exception);
            }
        }

        // Serialization
        enum PropertyID
        {
            Value = 1,
        }

        public int WriteLength(StreamContext context)
        {
            int length = 0;

            if (context.fullModel)
            {
                // Mark unreliable properties as clean and flatten the in-flight cache.
                // TODO: Move this out of WriteLength() once we have a prepareToWrite method.
                _scaleValue = scaleValue;
                _cache.Clear();

                // Write all properties
                length += WriteStream.WriteFloatLength((uint) PropertyID.Value);
            }
            else
            {
                // Reliable properties
                if (context.reliableChannel)
                {
                    LocalCacheEntry entry = _cache.localCache;
                    if (entry.valueSet)
                        length += WriteStream.WriteFloatLength((uint) PropertyID.Value);
                }
            }

            return length;
        }

        public void Write(WriteStream stream, StreamContext context)
        {
            if (context.fullModel)
            {
                // Write all properties
                stream.WriteFloat((uint) PropertyID.Value, _scaleValue);
            }
            else
            {
                // Reliable properties
                if (context.reliableChannel)
                {
                    LocalCacheEntry entry = _cache.localCache;
                    if (entry.valueSet)
                        _cache.PushLocalCacheToInflight(context.updateID);

                    if (entry.valueSet)
                        stream.WriteFloat((uint) PropertyID.Value, entry.scaleValue);
                }
            }
        }

        public void Read(ReadStream stream, StreamContext context)
        {
            bool valueExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.valueSet);

            // Remove from in-flight
            if (context.deltaUpdatesOnly && context.reliableChannel)
                _cache.RemoveUpdateFromInflight(context.updateID);

            // Loop through each property and deserialize
            uint propertyID;
            while (stream.ReadNextPropertyID(out propertyID))
            {
                switch (propertyID)
                {
                    case (uint) PropertyID.Value:
                    {
                        float previousValue = _scaleValue;

                        _scaleValue = stream.ReadFloat();

                        if (!valueExistsInChangeCache && _scaleValue != previousValue)
                            FireValueDidChange(_scaleValue);
                        break;
                    }
                    default:
                        stream.SkipProperty();
                        break;
                }
            }
        }
    }

/* ----- End Normal Autogenerated Code ----- */
}