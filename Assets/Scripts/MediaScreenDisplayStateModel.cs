using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class MediaScreenDisplayStateModel
{
    [RealtimeProperty(1, true)] private int _mediaTypeId;
    [RealtimeProperty(2, true)] private int _mediaId;
    [RealtimeProperty(3, true)] private int _screenDisplayId;
    [RealtimeProperty(4, true)] private bool _isPortal;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class MediaScreenDisplayStateModel : RealtimeModel {
    public int mediaTypeId {
        get {
            return _cache.LookForValueInCache(_mediaTypeId, entry => entry.mediaTypeIdSet, entry => entry.mediaTypeId);
        }
        set {
            if (this.mediaTypeId == value) return;
            _cache.UpdateLocalCache(entry => { entry.mediaTypeIdSet = true; entry.mediaTypeId = value; return entry; });
            InvalidateReliableLength();
        }
    }
    
    public int mediaId {
        get {
            return _cache.LookForValueInCache(_mediaId, entry => entry.mediaIdSet, entry => entry.mediaId);
        }
        set {
            if (this.mediaId == value) return;
            _cache.UpdateLocalCache(entry => { entry.mediaIdSet = true; entry.mediaId = value; return entry; });
            InvalidateReliableLength();
        }
    }
    
    public int screenDisplayId {
        get {
            return _cache.LookForValueInCache(_screenDisplayId, entry => entry.screenDisplayIdSet, entry => entry.screenDisplayId);
        }
        set {
            if (this.screenDisplayId == value) return;
            _cache.UpdateLocalCache(entry => { entry.screenDisplayIdSet = true; entry.screenDisplayId = value; return entry; });
            InvalidateReliableLength();
        }
    }
    
    public bool isPortal {
        get {
            return _cache.LookForValueInCache(_isPortal, entry => entry.isPortalSet, entry => entry.isPortal);
        }
        set {
            if (this.isPortal == value) return;
            _cache.UpdateLocalCache(entry => { entry.isPortalSet = true; entry.isPortal = value; return entry; });
            InvalidateReliableLength();
        }
    }
    
    private struct LocalCacheEntry {
        public bool mediaTypeIdSet;
        public int mediaTypeId;
        public bool mediaIdSet;
        public int mediaId;
        public bool screenDisplayIdSet;
        public int screenDisplayId;
        public bool isPortalSet;
        public bool isPortal;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        MediaTypeId = 1,
        MediaId = 2,
        ScreenDisplayId = 3,
        IsPortal = 4,
    }
    
    public MediaScreenDisplayStateModel() : this(null) {
    }
    
    public MediaScreenDisplayStateModel(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteVarint32Length((uint)PropertyID.MediaTypeId, (uint)_mediaTypeId);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.MediaId, (uint)_mediaId);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.ScreenDisplayId, (uint)_screenDisplayId);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.IsPortal, _isPortal ? 1u : 0u);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.mediaTypeIdSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.MediaTypeId, (uint)entry.mediaTypeId);
            }
            if (entry.mediaIdSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.MediaId, (uint)entry.mediaId);
            }
            if (entry.screenDisplayIdSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.ScreenDisplayId, (uint)entry.screenDisplayId);
            }
            if (entry.isPortalSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.IsPortal, entry.isPortal ? 1u : 0u);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteVarint32((uint)PropertyID.MediaTypeId, (uint)_mediaTypeId);
            stream.WriteVarint32((uint)PropertyID.MediaId, (uint)_mediaId);
            stream.WriteVarint32((uint)PropertyID.ScreenDisplayId, (uint)_screenDisplayId);
            stream.WriteVarint32((uint)PropertyID.IsPortal, _isPortal ? 1u : 0u);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.mediaTypeIdSet || entry.mediaIdSet || entry.screenDisplayIdSet || entry.isPortalSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.mediaTypeIdSet) {
                stream.WriteVarint32((uint)PropertyID.MediaTypeId, (uint)entry.mediaTypeId);
                didWriteProperties = true;
            }
            if (entry.mediaIdSet) {
                stream.WriteVarint32((uint)PropertyID.MediaId, (uint)entry.mediaId);
                didWriteProperties = true;
            }
            if (entry.screenDisplayIdSet) {
                stream.WriteVarint32((uint)PropertyID.ScreenDisplayId, (uint)entry.screenDisplayId);
                didWriteProperties = true;
            }
            if (entry.isPortalSet) {
                stream.WriteVarint32((uint)PropertyID.IsPortal, entry.isPortal ? 1u : 0u);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.MediaTypeId: {
                    _mediaTypeId = (int)stream.ReadVarint32();
                    break;
                }
                case (uint)PropertyID.MediaId: {
                    _mediaId = (int)stream.ReadVarint32();
                    break;
                }
                case (uint)PropertyID.ScreenDisplayId: {
                    _screenDisplayId = (int)stream.ReadVarint32();
                    break;
                }
                case (uint)PropertyID.IsPortal: {
                    _isPortal = (stream.ReadVarint32() != 0);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _mediaTypeId = mediaTypeId;
        _mediaId = mediaId;
        _screenDisplayId = screenDisplayId;
        _isPortal = isPortal;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
