//using System.Collections;
//using System.Collections.Generic;
//using UnityEngine;
//using Normal.Realtime.Serialization;
//using Normal.Realtime;

//namespace Assets.Scripts
//{
//    [RealtimeModel]
//    public partial class StreamSelectSyncModel
//    {
//        // 6, 10
//        [RealtimeProperty(1, true, true)] private int _streamId;
//    }
//}

/* ----- Begin Normal Autogenerated Code ----- */
//namespace Assets.Scripts {
//    public partial class StreamSelectSyncModel : RealtimeModel {
//        public int streamId {
//            get {
//                return _cache.LookForValueInCache(_streamId, entry => entry.streamIdSet, entry => entry.streamId);
//            }
//            set {
//                if (this.streamId == value) return;
//                _cache.UpdateLocalCache(entry => { entry.streamIdSet = true; entry.streamId = value; return entry; });
//                InvalidateReliableLength();
//                FireStreamIdDidChange(value);
//            }
//        }
        
//        public delegate void PropertyChangedHandler<in T>(StreamSelectSyncModel model, T value);
//        public event PropertyChangedHandler<int> streamIdDidChange;
        
//        private struct LocalCacheEntry {
//            public bool streamIdSet;
//            public int streamId;
//        }
        
//        private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
        
//        public enum PropertyID : uint {
//            StreamId = 10,
//        }
        
//        public StreamSelectSyncModel() : this(null) {
//        }
        
//        public StreamSelectSyncModel(RealtimeModel parent) : base(null, parent) {
//        }
        
//        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
//            UnsubscribeClearCacheCallback();
//        }
        
//        private void FireStreamIdDidChange(int value) {
//            try {
//                streamIdDidChange?.Invoke(this, value);
//            } catch (System.Exception exception) {
//                UnityEngine.Debug.LogException(exception);
//            }
//        }
        
//        protected override int WriteLength(StreamContext context) {
//            int length = 0;
//            if (context.fullModel) {
//                FlattenCache();
//                length += WriteStream.WriteVarint32Length((uint)PropertyID.StreamId, (uint)_streamId);
//            } else if (context.reliableChannel) {
//                LocalCacheEntry entry = _cache.localCache;
//                if (entry.streamIdSet) {
//                    length += WriteStream.WriteVarint32Length((uint)PropertyID.StreamId, (uint)entry.streamId);
//                }
//            }
//            return length;
//        }
        
//        protected override void Write(WriteStream stream, StreamContext context) {
//            var didWriteProperties = false;
            
//            if (context.fullModel) {
//                stream.WriteVarint32((uint)PropertyID.StreamId, (uint)_streamId);
//            } else if (context.reliableChannel) {
//                LocalCacheEntry entry = _cache.localCache;
//                if (entry.streamIdSet) {
//                    _cache.PushLocalCacheToInflight(context.updateID);
//                    ClearCacheOnStreamCallback(context);
//                }
//                if (entry.streamIdSet) {
//                    stream.WriteVarint32((uint)PropertyID.StreamId, (uint)entry.streamId);
//                    didWriteProperties = true;
//                }
                
//                if (didWriteProperties) InvalidateReliableLength();
//            }
//        }
        
//        protected override void Read(ReadStream stream, StreamContext context) {
//            while (stream.ReadNextPropertyID(out uint propertyID)) {
//                switch (propertyID) {
//                    case (uint)PropertyID.StreamId: {
//                        int previousValue = _streamId;
//                        _streamId = (int)stream.ReadVarint32();
//                        bool streamIdExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.streamIdSet);
//                        if (!streamIdExistsInChangeCache && _streamId != previousValue) {
//                            FireStreamIdDidChange(_streamId);
//                        }
//                        break;
//                    }
//                    default: {
//                        stream.SkipProperty();
//                        break;
//                    }
//                }
//            }
//        }
        
//        #region Cache Operations
        
//        private StreamEventDispatcher _streamEventDispatcher;
        
//        private void FlattenCache() {
//            _streamId = streamId;
//            _cache.Clear();
//        }
        
//        private void ClearCache(uint updateID) {
//            _cache.RemoveUpdateFromInflight(updateID);
//        }
        
//        private void ClearCacheOnStreamCallback(StreamContext context) {
//            if (_streamEventDispatcher != context.dispatcher) {
//                UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
//            }
//            _streamEventDispatcher = context.dispatcher;
//            _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
//        }
        
//        private void UnsubscribeClearCacheCallback() {
//            if (_streamEventDispatcher != null) {
//                _streamEventDispatcher.RemoveStreamCallback(ClearCache);
//                _streamEventDispatcher = null;
//            }
//        }
        
//        #endregion
//    }
//}
/* ----- End Normal Autogenerated Code ----- */
