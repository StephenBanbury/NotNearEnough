using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

namespace Assets.Scripts
{
    [RealtimeModel]
    public partial class TeleportToSceneModel
    {
        [RealtimeProperty(1, true, true)] private int _sceneId;
        [RealtimeProperty(2, true, true)] private int _secondsDelay;
    }
}

/* ----- Begin Normal Autogenerated Code ----- */
namespace Assets.Scripts {
    public partial class TeleportToSceneModel : RealtimeModel {
        public int sceneId {
            get {
                return _sceneIdProperty.value;
            }
            set {
                if (_sceneIdProperty.value == value) return;
                _sceneIdProperty.value = value;
                InvalidateReliableLength();
                FireSceneIdDidChange(value);
            }
        }
        
        public int secondsDelay {
            get {
                return _secondsDelayProperty.value;
            }
            set {
                if (_secondsDelayProperty.value == value) return;
                _secondsDelayProperty.value = value;
                InvalidateReliableLength();
                FireSecondsDelayDidChange(value);
            }
        }
        
        public delegate void PropertyChangedHandler<in T>(TeleportToSceneModel model, T value);
        public event PropertyChangedHandler<int> sceneIdDidChange;
        public event PropertyChangedHandler<int> secondsDelayDidChange;
        
        public enum PropertyID : uint {
            SceneId = 1,
            SecondsDelay = 2,
        }
        
        #region Properties
        
        private ReliableProperty<int> _sceneIdProperty;
        
        private ReliableProperty<int> _secondsDelayProperty;
        
        #endregion
        
        public TeleportToSceneModel() : base(null) {
            _sceneIdProperty = new ReliableProperty<int>(1, _sceneId);
            _secondsDelayProperty = new ReliableProperty<int>(2, _secondsDelay);
        }
        
        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
            _sceneIdProperty.UnsubscribeCallback();
            _secondsDelayProperty.UnsubscribeCallback();
        }
        
        private void FireSceneIdDidChange(int value) {
            try {
                sceneIdDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireSecondsDelayDidChange(int value) {
            try {
                secondsDelayDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        protected override int WriteLength(StreamContext context) {
            var length = 0;
            length += _sceneIdProperty.WriteLength(context);
            length += _secondsDelayProperty.WriteLength(context);
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            var writes = false;
            writes |= _sceneIdProperty.Write(stream, context);
            writes |= _secondsDelayProperty.Write(stream, context);
            if (writes) InvalidateContextLength(context);
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            var anyPropertiesChanged = false;
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                var changed = false;
                switch (propertyID) {
                    case (uint) PropertyID.SceneId: {
                        changed = _sceneIdProperty.Read(stream, context);
                        if (changed) FireSceneIdDidChange(sceneId);
                        break;
                    }
                    case (uint) PropertyID.SecondsDelay: {
                        changed = _secondsDelayProperty.Read(stream, context);
                        if (changed) FireSecondsDelayDidChange(secondsDelay);
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
                anyPropertiesChanged |= changed;
            }
            if (anyPropertiesChanged) {
                UpdateBackingFields();
            }
        }
        
        private void UpdateBackingFields() {
            _sceneId = sceneId;
            _secondsDelay = secondsDelay;
        }
        
    }
}
/* ----- End Normal Autogenerated Code ----- */
