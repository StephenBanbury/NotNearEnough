using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

namespace Assets.Scripts
{
    [RealtimeModel]
    public partial class FormationSelectSyncModel
    {
        [RealtimeProperty(7, true, true)] private int _formationId;
    }

/* ----- Begin Normal Autogenerated Code ----- */
    public partial class FormationSelectSyncModel : IModel
    {
        // Properties
        public int formationId
        {
            get { return _cache.LookForValueInCache(_formationId, entry => entry.formationIdSet, entry => entry.formationId); }
            set
            {
                if (value == formationId) return;
                _cache.UpdateLocalCache(entry =>
                {
                    entry.formationIdSet = true;
                    entry.formationId = value;
                    return entry;
                });
                FireFormationIdDidChange(value);
            }
        }

        // Events
        public delegate void FormationIdDidChange(FormationSelectSyncModel model, int value);

        public event FormationIdDidChange formationIdDidChange;

        // Delta updates
        private struct LocalCacheEntry
        {
            public bool formationIdSet;
            public int formationId;
        }

        private LocalChangeCache<LocalCacheEntry> _cache;

        public FormationSelectSyncModel()
        {
            _cache = new LocalChangeCache<LocalCacheEntry>();
        }

        // Events
        public void FireFormationIdDidChange(int value)
        {
            try
            {
                if (formationIdDidChange != null)
                    formationIdDidChange(this, value);
            }
            catch (System.Exception exception)
            {
                Debug.LogException(exception);
            }
        }

        // Serialization
        enum PropertyID
        {
            FormationId = 1,
        }

        public int WriteLength(StreamContext context)
        {
            int length = 0;

            if (context.fullModel)
            {
                // Mark unreliable properties as clean and flatten the in-flight cache.
                // TODO: Move this out of WriteLength() once we have a prepareToWrite method.
                _formationId = formationId;
                _cache.Clear();

                // Write all properties
                length += WriteStream.WriteVarint32Length((uint) PropertyID.FormationId, (uint) _formationId);
            }
            else
            {
                // Reliable properties
                if (context.reliableChannel)
                {
                    LocalCacheEntry entry = _cache.localCache;
                    if (entry.formationIdSet)
                        length += WriteStream.WriteVarint32Length((uint) PropertyID.FormationId, (uint) entry.formationId);
                }
            }

            return length;
        }

        public void Write(WriteStream stream, StreamContext context)
        {
            if (context.fullModel)
            {
                // Write all properties
                stream.WriteVarint32((uint) PropertyID.FormationId, (uint) _formationId);
            }
            else
            {
                // Reliable properties
                if (context.reliableChannel)
                {
                    LocalCacheEntry entry = _cache.localCache;
                    if (entry.formationIdSet)
                        _cache.PushLocalCacheToInflight(context.updateID);

                    if (entry.formationIdSet)
                        stream.WriteVarint32((uint) PropertyID.FormationId, (uint) entry.formationId);
                }
            }
        }

        public void Read(ReadStream stream, StreamContext context)
        {
            bool formationIdExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.formationIdSet);

            // Remove from in-flight
            if (context.deltaUpdatesOnly && context.reliableChannel)
                _cache.RemoveUpdateFromInflight(context.updateID);

            // Loop through each property and deserialize
            uint propertyID;
            while (stream.ReadNextPropertyID(out propertyID))
            {
                switch (propertyID)
                {
                    case (uint) PropertyID.FormationId:
                    {
                        int previousValue = _formationId;

                        _formationId = (int) stream.ReadVarint32();

                        if (!formationIdExistsInChangeCache && _formationId != previousValue)
                            FireFormationIdDidChange(_formationId);
                        break;
                    }
                    default:
                        stream.SkipProperty();
                        break;
                }
            }
        }
    }

/* ----- End Normal Autogenerated Code ----- */
}