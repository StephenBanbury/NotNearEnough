using Normal.Realtime.Serialization;
using Normal.Realtime;

namespace Assets.Scripts
{
    [RealtimeModel]
    public partial class FormationSelectSyncModel
    {   
        [RealtimeProperty(3, true, true)] private int _formationId;
    }
}

/* ----- Begin Normal Autogenerated Code ----- */
namespace Assets.Scripts {
    public partial class FormationSelectSyncModel : RealtimeModel {
        public int formationId {
            get {
                return _cache.LookForValueInCache(_formationId, entry => entry.formationIdSet, entry => entry.formationId);
            }
            set {
                if (this.formationId == value) return;
                _cache.UpdateLocalCache(entry => { entry.formationIdSet = true; entry.formationId = value; return entry; });
                InvalidateReliableLength();
                FireFormationIdDidChange(value);
            }
        }
        
        public delegate void PropertyChangedHandler<in T>(FormationSelectSyncModel model, T value);
        public event PropertyChangedHandler<int> formationIdDidChange;
        
        private struct LocalCacheEntry {
            public bool formationIdSet;
            public int formationId;
        }
        
        private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
        
        public enum PropertyID : uint {
            FormationId = 3,
        }
        
        public FormationSelectSyncModel() : this(null) {
        }
        
        public FormationSelectSyncModel(RealtimeModel parent) : base(null, parent) {
        }
        
        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
            UnsubscribeClearCacheCallback();
        }
        
        private void FireFormationIdDidChange(int value) {
            try {
                formationIdDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        protected override int WriteLength(StreamContext context) {
            int length = 0;
            if (context.fullModel) {
                FlattenCache();
                length += WriteStream.WriteVarint32Length((uint)PropertyID.FormationId, (uint)_formationId);
            } else if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.formationIdSet) {
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.FormationId, (uint)entry.formationId);
                }
            }
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            var didWriteProperties = false;
            
            if (context.fullModel) {
                stream.WriteVarint32((uint)PropertyID.FormationId, (uint)_formationId);
            } else if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.formationIdSet) {
                    _cache.PushLocalCacheToInflight(context.updateID);
                    ClearCacheOnStreamCallback(context);
                }
                if (entry.formationIdSet) {
                    stream.WriteVarint32((uint)PropertyID.FormationId, (uint)entry.formationId);
                    didWriteProperties = true;
                }
                
                if (didWriteProperties) InvalidateReliableLength();
            }
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                switch (propertyID) {
                    case (uint)PropertyID.FormationId: {
                        int previousValue = _formationId;
                        _formationId = (int)stream.ReadVarint32();
                        bool formationIdExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.formationIdSet);
                        if (!formationIdExistsInChangeCache && _formationId != previousValue) {
                            FireFormationIdDidChange(_formationId);
                        }
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
            }
        }
        
        #region Cache Operations
        
        private StreamEventDispatcher _streamEventDispatcher;
        
        private void FlattenCache() {
            _formationId = formationId;
            _cache.Clear();
        }
        
        private void ClearCache(uint updateID) {
            _cache.RemoveUpdateFromInflight(updateID);
        }
        
        private void ClearCacheOnStreamCallback(StreamContext context) {
            if (_streamEventDispatcher != context.dispatcher) {
                UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
            }
            _streamEventDispatcher = context.dispatcher;
            _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
        }
        
        private void UnsubscribeClearCacheCallback() {
            if (_streamEventDispatcher != null) {
                _streamEventDispatcher.RemoveStreamCallback(ClearCache);
                _streamEventDispatcher = null;
            }
        }
        
        #endregion
    }
}
/* ----- End Normal Autogenerated Code ----- */
